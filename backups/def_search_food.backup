# 載入需要的模組
import os
import sys
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage, FlexSendMessage
import psycopg2
import json
from flex_search_confirm import confirm_json

'''
參數：
line_bot_api:           line_bot_api物件
conn:                   資料庫連線
event:                  message_api事件
user_id:                使用者ID
text:                   使用者輸入內容
userid_in_activities:   使用者是否曾搜尋過
status                  使用者搜尋狀態
'''


# 建立涵式：紀錄熱量
def kal_record(line_bot_api, conn, event, user_id, text, userid_in_activities, status):
    # 更新使用者搜尋狀態為輸入關鍵字
    cursor = conn.cursor()
    print(f"輸入字串：{text}")
    if userid_in_activities is not None:
        SQL_order = f'''
        update activities set status = '輸入關鍵字' where userid = '{user_id}';
        '''
    # 如果沒有記錄過這個使用者，同時新增一筆資料進入activities表
    else:
        SQL_order = f'''
        insert into activities (userid,status) values ('{user_id}','輸入關鍵字')
        '''
        print("SQL:新增人員進入activities表")
    cursor.execute(SQL_order)
    conn.commit()
    print("SQL更新activities狀態:輸入關鍵字 成功")
    cursor.close()
    # 回傳訊息
    line_bot_api.reply_message(
        event.reply_token,
        TextSendMessage(text="請輸入食物名稱")
    )


# 建立涵式：輸入關鍵字
def search_food(line_bot_api, conn, event, user_id, text, userid_in_activities, status):
    cursor = conn.cursor()
    search_query = text
    print(f"搜尋字串: {search_query}")
    SQL_order = f'''
    select food_name,kal,unit from Food_Calories where food_name like '%{search_query}%';
    '''
    cursor.execute(SQL_order)
    print("SQL搜尋Food_Calories成功")
    search_result = cursor.fetchone()
    print(search_result)
    cursor.close()

    # 判斷資料庫是否已有此食物資料
    if search_result is None:
        # 更新使用者搜尋狀態為紀錄失敗
        cursor = conn.cursor()
        SQL_order = f'''
        update activities set status = '紀錄失敗' where userid = '{user_id}';
        '''
        cursor.execute(SQL_order)
        conn.commit()
        print("SQL更新activities狀態:紀錄失敗 成功")
        cursor.close()
        FlexMessage = json.load(
            open('flex_cant_find.json', 'r', encoding='utf-8'))
        line_bot_api.reply_message(
            event.reply_token,
            FlexSendMessage('cant_find', FlexMessage)
        )
    else:
        # 更新使用者搜尋狀態為搜尋成功
        food_name_result, kal_result, unit_result = search_result[
            0], search_result[1], search_result[2]
        cursor = conn.cursor()
        SQL_order = f'''
        update activities set food_name = '{food_name_result}', kal = '{kal_result}', status = '搜尋成功'
        where userid = '{user_id}';
        '''
        cursor.execute(SQL_order)
        conn.commit()
        print("SQL更新activities狀態:搜尋成功 成功")
        cursor.close()
        FlexMessage = confirm_json(unit_result, food_name_result, kal_result)
        print(FlexMessage)
        line_bot_api.reply_message(
            event.reply_token,
            FlexSendMessage('search_confirm', FlexMessage)
        )


# 建立涵式：確認是否紀錄
def confirm(line_bot_api, conn, event, user_id, text, userid_in_activities, status):
    if text == "[確定紀錄]":
        cursor = conn.cursor()
        SQL_order = f'''
        update activities set status = '輸入數量' where userid = '{user_id}';
        '''
        cursor.execute(SQL_order)
        conn.commit()
        print("SQL更新activities狀態:輸入數量 成功")
        cursor.close()
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="請輸入食物數量"))
    if text == "[取消紀錄]":
        cursor = conn.cursor()
        SQL_order = f'''
        update activities set status = '紀錄失敗' where userid = '{user_id}';
        '''
        cursor.execute(SQL_order)
        conn.commit()
        print("SQL更新activities狀態:紀錄失敗 成功")
        cursor.close()
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="已取消紀錄熱量"))


# 建立涵式：紀錄數量
def quantity_record(line_bot_api, conn, event, user_id, text, userid_in_activities, status):
    # 還沒排除負數
    try:
        quantity = float(text)
        cursor = conn.cursor()
        SQL_order = f'''
        select kal from activities where userid = '{user_id}';
        '''
        cursor.execute(SQL_order)
        kal_result = cursor.fetchone()[0]
        print(f"SQL搜詢成功，kal: {kal_result}")
        total_kal = kal_result * quantity
        SQL_order = f'''
        update userinfo set today_kal_left = today_kal_left - {total_kal} where userid = '{user_id}';
        update activities set status = '紀錄成功' where userid = '{user_id}';
        select today_kal_left from userinfo where userid = '{user_id}';
        '''
        cursor.execute(SQL_order)
        conn.commit()
        print("SQL更新activities狀態:紀錄成功 成功")
        today_kal_left = cursor.fetchone()[0]
        cursor.close()
        if today_kal_left >= 0:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text=f"已成功紀錄熱量，您今日的熱量扣打剩餘{today_kal_left}卡"))
        else:
            kal_exceed = 0 - today_kal_left
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text=f"已成功紀錄熱量，您已超過預定熱量上限{kal_exceed}卡了，不行再吃囉！"))
    except ValueError:
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="請輸入數值"))
